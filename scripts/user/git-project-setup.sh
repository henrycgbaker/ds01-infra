# File: /opt/ds01-infra/scripts/user/git-setup-project.sh
#!/bin/bash
# Initialize Git workflow for DS01 projects

set -e

PROJECT_DIR="${1:-$(pwd)}"
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

if [ ! -d "$PROJECT_DIR" ]; then
    echo -e "${RED}Error: Directory does not exist: $PROJECT_DIR${NC}"
    exit 1
fi

cd "$PROJECT_DIR"

echo -e "${GREEN}${BOLD}━━━ Git Setup for DS01 Project ━━━${NC}\n"
echo "Project directory: $PROJECT_DIR"
echo ""

# Check if already a git repo
if [ -d ".git" ]; then
    echo -e "${YELLOW}⚠  Already a git repository${NC}"
    read -p "Reconfigure? [y/N]: " RECONFIG
    if [[ ! "$RECONFIG" =~ ^[Yy] ]]; then
        exit 0
    fi
else
    # Initialize repo
    echo -e "${BLUE}Initializing git repository...${NC}"
    git init
    echo -e "${GREEN}✓${NC} Git initialized"
fi

# Create comprehensive .gitignore for ML projects
echo -e "\n${BLUE}Creating .gitignore...${NC}"

cat > .gitignore << 'GITIGNOREEOF'
# DS01 ML Project .gitignore
# Generated by ds01-infra

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
.venv

# Jupyter Notebooks
.ipynb_checkpoints/
*.ipynb

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# ML Data & Models
data/raw/*
data/processed/*
!data/raw/.gitkeep
!data/processed/.gitkeep
*.h5
*.hdf5
*.pkl
*.pickle
*.pt
*.pth
*.ckpt
*.safetensors
models/checkpoints/*
!models/checkpoints/.gitkeep

# Logs & Outputs
logs/
*.log
outputs/
runs/
wandb/
mlruns/
.tensorboard/

# Large files
*.tar
*.tar.gz
*.zip
*.7z
*.rar
*.bin
*.npy
*.npz

# Temporary files
tmp/
temp/
.cache/
.DS_Store
Thumbs.db

# Environment & Config
.env
.env.local
*.env
config/secrets.yaml
credentials.json

# Container-specific
.jupyter.log
.idle-warning.txt
.ds01-*
GITIGNOREEOF

echo -e "${GREEN}✓${NC} .gitignore created"

# Create data directory structure with keep files
echo -e "\n${BLUE}Setting up data directories...${NC}"
mkdir -p data/{raw,processed,external}
mkdir -p models/checkpoints
mkdir -p logs
mkdir -p outputs

# Create .gitkeep files
touch data/raw/.gitkeep
touch data/processed/.gitkeep
touch data/external/.gitkeep
touch models/checkpoints/.gitkeep
touch logs/.gitkeep
touch outputs/.gitkeep

echo -e "${GREEN}✓${NC} Directory structure created"

# Git configuration for ML
echo -e "\n${BLUE}Configuring Git for ML projects...${NC}"

# Set up Git LFS if available
if command -v git-lfs &> /dev/null; then
    git lfs install
    
    # Track large files with LFS
    git lfs track "*.pth"
    git lfs track "*.pt"
    git lfs track "*.h5"
    git lfs track "*.ckpt"
    git lfs track "*.bin"
    
    echo -e "${GREEN}✓${NC} Git LFS configured"
else
    echo -e "${YELLOW}⚠${NC}  Git LFS not installed (optional but recommended for large models)"
    echo "  Install with: sudo apt install git-lfs"
fi

# Create useful Git hooks
echo -e "\n${BLUE}Setting up Git hooks...${NC}"

# Pre-commit hook to prevent large files
cat > .git/hooks/pre-commit << 'HOOKEOF'
#!/bin/bash
# DS01 Pre-commit hook - Prevent committing large files

MAX_SIZE=10485760  # 10MB in bytes

# Check for large files
large_files=$(git diff --cached --name-only --diff-filter=ACM | while read file; do
    if [ -f "$file" ]; then
        size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
        if [ "$size" -gt "$MAX_SIZE" ]; then
            echo "$file ($(numfmt --to=iec-i --suffix=B $size))"
        fi
    fi
done)

if [ -n "$large_files" ]; then
    echo "ERROR: Attempting to commit large files:"
    echo "$large_files"
    echo ""
    echo "Large files should be:"
    echo "  1. Added to .gitignore, or"
    echo "  2. Tracked with Git LFS: git lfs track <pattern>"
    echo ""
    echo "To commit anyway: git commit --no-verify"
    exit 1
fi

# Check for potential secrets
secrets=$(git diff --cached --name-only | xargs grep -l "password\|secret\|api_key\|token" 2>/dev/null || true)
if [ -n "$secrets" ]; then
    echo "WARNING: Potential secrets detected in:"
    echo "$secrets"
    echo ""
    read -p "Continue commit? [y/N]: " confirm
    if [[ ! "$confirm" =~ ^[Yy] ]]; then
        exit 1
    fi
fi

exit 0
HOOKEOF

chmod +x .git/hooks/pre-commit
echo -e "${GREEN}✓${NC} Pre-commit hook installed"

# Create commit message template
cat > .git/.gitmessage << 'MSGEOF'
# <type>: <subject> (max 50 chars)

# <body> (wrap at 72 chars)
# Explain what and why, not how

# <footer>
# Issue references, breaking changes, etc.

# Types:
#   feat:     New feature
#   fix:      Bug fix
#   docs:     Documentation changes
#   refactor: Code restructuring
#   test:     Adding tests
#   chore:    Maintenance tasks
#   exp:      Experimental changes
MSGEOF

git config commit.template .git/.gitmessage
echo -e "${GREEN}✓${NC} Commit template configured"

# Set user info if not set globally
if [ -z "$(git config user.name)" ]; then
    read -p "Git user name: " git_name
    git config user.name "$git_name"
fi

if [ -z "$(git config user.email)" ]; then
    read -p "Git user email: " git_email
    git config user.email "$git_email"
fi

# Create initial commit
echo -e "\n${BLUE}Creating initial commit...${NC}"

git add .gitignore
git add data/*/.gitkeep models/*/.gitkeep logs/.gitkeep outputs/.gitkeep 2>/dev/null || true
git commit -m "chore: Initialize project structure with DS01 configuration" || echo "Nothing to commit"

echo -e "${GREEN}✓${NC} Initial commit created"

# Create useful branches
echo -e "\n${BLUE}Setting up branches...${NC}"

read -p "Create 'dev' branch for development? [Y/n]: " CREATE_DEV
CREATE_DEV=${CREATE_DEV:-Y}

if [[ "$CREATE_DEV" =~ ^[Yy] ]]; then
    git branch dev 2>/dev/null || echo "  Branch 'dev' already exists"
    echo -e "${GREEN}✓${NC} Branch 'dev' ready"
    echo "  Switch with: ${CYAN}git checkout dev${NC}"
fi

# Create README if it doesn't exist
if [ ! -f "README.md" ]; then
    echo -e "\n${BLUE}Creating README.md...${NC}"
    
    cat > README.md << READMEEOF
# $(basename "$PROJECT_DIR")

ML project on DS01 GPU Server

## Structure

\`\`\`
.
├── data/
│   ├── raw/              # Original, immutable data
│   ├── processed/        # Cleaned, transformed data
│   └── external/         # External datasets
├── models/
│   └── checkpoints/      # Model checkpoints
├── notebooks/            # Jupyter notebooks
├── scripts/              # Python scripts
├── logs/                 # Training logs
├── outputs/              # Results, plots, reports
└── README.md
\`\`\`

## Setup

\`\`\`bash
# Open container
mlc-open $(basename "$PROJECT_DIR")

# Install requirements
pip install -r requirements.txt

# Run training
python scripts/train.py
\`\`\`

## Git Workflow

\`\`\`bash
# Development branch
git checkout dev

# Make changes
git add .
git commit -m "feat: description"

# Merge to main when stable
git checkout main
git merge dev
\`\`\`

## Experiment Tracking

- Logs saved to \`logs/\`
- Model checkpoints in \`models/checkpoints/\`
- Use wandb/tensorboard for metrics

## Notes

- All data in \`data/\` is gitignored
- Large models tracked with Git LFS
- Always work in containers for reproducibility
READMEEOF
    
    git add README.md
    git commit -m "docs: Add project README" 2>/dev/null || true
    echo -e "${GREEN}✓${NC} README.md created"
fi

# Create requirements.txt template
if [ ! -f "requirements.txt" ]; then
    echo -e "\n${BLUE}Creating requirements.txt template...${NC}"
    
    cat > requirements.txt << REQEOF
# DS01 Project Requirements
# Install with: pip install -r requirements.txt

# Core
torch>=2.0.0
numpy>=1.24.0
pandas>=2.0.0

# Visualization
matplotlib>=3.7.0
seaborn>=0.12.0

# Utilities
tqdm>=4.65.0
pyyaml>=6.0

# Add your specific requirements below:
REQEOF
    
    echo -e "${GREEN}✓${NC} requirements.txt template created"
fi

# Summary
echo -e "\n${GREEN}${BOLD}━━━ Git Setup Complete! ━━━${NC}\n"

cat << SUMMARYEOF
${BOLD}Your project is now configured with:${NC}

✓ Git repository initialized
✓ ML-focused .gitignore
✓ Directory structure (data/, models/, logs/, outputs/)
✓ Pre-commit hook (prevents large file commits)
✓ Commit message template
✓ README.md and requirements.txt

${BOLD}Recommended workflow:${NC}

1. ${CYAN}git checkout dev${NC}              # Work on dev branch
2. Make changes and commit often
3. ${CYAN}git checkout main && git merge dev${NC}  # Merge when stable
4. ${CYAN}git push${NC}                      # Push to remote (if configured)

${BOLD}Remote repository setup:${NC}

${CYAN}git remote add origin <url>${NC}
${CYAN}git push -u origin main${NC}

${BOLD}Useful commands:${NC}

${CYAN}git status${NC}                   # Check current status
${CYAN}git log --oneline --graph${NC}    # View history
${CYAN}git diff${NC}                     # See changes
${CYAN}ds01-git-snapshot${NC}            # Quick snapshot (see below)

SUMMARYEOF